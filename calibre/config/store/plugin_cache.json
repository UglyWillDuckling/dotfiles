{
  "bn": "# -*-\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 4  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\n\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\n\ndef search_bn(query, max_results=10, timeout=60, write_html_to=''):\n    url = 'https://www.barnesandnoble.com/s/%s?keyword=%s&store=ebook&view=list' % (query.replace(' ', '-'), quote_plus(query))\n\n    br = browser()\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        for data in doc.xpath('//section[@id=\"gridView\"]//div[contains(@class, \"product-shelf-tile-book\")]'):\n            if counter <= 0:\n                break\n            counter -= 1\n\n            cover_url = ''\n            cover_div = data.xpath('.//div[contains(@class, \"product-shelf-image\")]')\n            if cover_div:\n                cover_url = 'https:' + ''.join(cover_div[0].xpath('descendant::img/@src'))\n\n            title_div = data.xpath('.//div[contains(@class, \"product-shelf-title\")]')\n            if not title_div:\n                continue\n            title = ''.join(title_div[0].xpath('descendant::a/text()')).strip()\n            if not title:\n                continue\n            item_url = ''.join(title_div[0].xpath('descendant::a/@href')).strip()\n            if not item_url:\n                continue\n            item_url = 'https://www.barnesandnoble.com' + item_url\n\n            author = ''\n            author_div = data.xpath('.//div[contains(@class, \"product-shelf-author\")]')\n            if author_div:\n                author = ''.join(author_div[0].xpath('descendant::a/text()')).strip()\n\n            price = ''\n            price_div = data.xpath('.//div[contains(@class, \"product-shelf-pricing\")]/div[contains(@class, \"current\")]')\n            if price_div:\n                spans = price_div[0].xpath('descendant::span')\n                if spans:\n                    price = ''.join(spans[-1].xpath('descendant::text()'))\n                    if '\\n' in price:\n                        price = price.split('\\n')[1].split(',')[0]\n\n            s = SearchResult()\n            s.cover_url = cover_url\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = item_url.strip()\n            s.drm = SearchResult.DRM_UNKNOWN\n            s.formats = 'Nook'\n            yield s\n\n\nclass BNStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = \"https://bn.com\"\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_item if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        yield from search_bn(query, max_results, timeout)\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_bn(' '.join(sys.argv[1:]), write_html_to='/t/bn.html'):\n        print(result)\n",
  "ebooks_com": "# -*-\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 4  # Needed for dynamic plugin loading\n\nimport re\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef absolutize(url):\n    if url.startswith('/'):\n        url = 'https://www.ebooks.com' + url\n    return url\n\n\ndef search_ec(query, max_results=10, timeout=60, write_html_to=''):\n    import json\n    from urllib.parse import parse_qs, urlparse\n    url = 'https://www.ebooks.com/SearchApp/SearchResults.net?term=' + quote_plus(query)\n    br = browser()\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n    if write_html_to:\n        with open(write_html_to, 'wb') as d:\n            d.write(raw)\n    api = re.search(r'data-endpoint=\"(/api/search/.+?)\"', raw.decode('utf-8')).group(1)\n    counter = max_results\n    url = absolutize(api)\n    cc = parse_qs(urlparse(url).query)['CountryCode'][0]\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n    if write_html_to:\n        with open(write_html_to + '.json', 'wb') as d:\n            d.write(raw)\n    data = json.loads(raw)\n    for book in data['books']:\n        if counter <= 0:\n            break\n        counter -= 1\n        s = SearchResult()\n        s.cover_url = absolutize(book['image_url'])\n        s.title = book['title']\n        s.author = ' & '.join(x['name'] for x in book['authors'])\n        s.price = book['price']\n        s.detail_item = absolutize(book['book_url'])\n        s.ebooks_com_api_url = 'https://www.ebooks.com/api/book/?bookId={}&countryCode={}'.format(book[\"id\"], cc)\n        s.drm = SearchResult.DRM_UNKNOWN\n        yield s\n\n\ndef ec_details(search_result, timeout=30, write_data_to=''):\n    import json\n    br = browser()\n    with closing(br.open(search_result.ebooks_com_api_url, timeout=timeout)) as f:\n        raw = f.read()\n    if write_data_to:\n        with open(write_data_to, 'wb') as d:\n            d.write(raw)\n    data = json.loads(raw)\n    if 'drm' in data and 'drm_free' in data['drm']:\n        search_result.drm = SearchResult.DRM_UNLOCKED if data['drm']['drm_free'] else SearchResult.DRM_LOCKED\n    fmts = []\n    for x in data['information']['formats']:\n        x = x.split()[0]\n        fmts.append(x)\n    if fmts:\n        search_result.formats = ', '.join(fmts).upper()\n\n\nclass EbookscomStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        m_url = 'http://www.dpbolvw.net/'\n        h_click = 'click-4913808-10364500'\n        d_click = 'click-4913808-10281551'\n\n        url = m_url + h_click\n        detail_url = None\n        if detail_item:\n            detail_url = m_url + d_click + detail_item\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        yield from search_ec(query, max_results, timeout)\n\n    def get_details(self, search_result, timeout):\n        ec_details(search_result, timeout)\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    results = tuple(search_ec(' '.join(sys.argv[1:]), write_html_to='/t/ec.html'))\n    for result in results:\n        print(result)\n    ec_details(results[0], write_data_to='/t/ecd.json')\n    print('-'*80)\n    print(results[0])\n",
  "ebookshoppe_uk": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 1  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib2 import quote\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom qt.core import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass EBookShoppeUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url_details = 'http://www.awin1.com/cread.php?awinmid=1414&awinaffid=120917&clickref=&p={0}'\n        url = 'http://www.awin1.com/awclick.php?mid=2666&id=120917'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.ebookshoppe.com/search.php?search_query=' + quote(query)\n        br = browser()\n        br.addheaders = [(\"Referer\", \"http://www.ebookshoppe.com/\")]\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ul[@class=\"ProductList\"]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/'\n                                        'strong/a/@href')).strip()\n                if not id:\n                    continue\n                cover_url = ''.join(data.xpath('./div[@class=\"ProductImage\"]/a/img/@src'))\n                title = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/strong/a/text()'))\n                price = ''.join(data.xpath('./div[@class=\"ProductPriceRating\"]/em/text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.detail_item = id\n\n                self.get_author_and_formats(s, timeout)\n                if not s.author:\n                    continue\n\n                yield s\n\n    def get_author_and_formats(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            author = ''.join(idata.xpath('//div[@id=\"ProductOtherDetails\"]/dl/dd[1]/text()'))\n            if author:\n                search_result.author = author\n            formats = idata.xpath('//dl[@class=\"ProductAddToCart\"]/dd/'\n                                  'ul[@class=\"ProductOptionList\"]/li/label/text()')\n            if formats:\n                search_result.formats = ', '.join(formats)\n            search_result.drm = SearchResult.DRM_UNKNOWN\n        return True\n",
  "empik": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 10  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2023, Tomasz Długosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom base64 import b64encode\nfrom contextlib import closing\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib import quote\n\nfrom lxml import html\n\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef as_base64(data):\n    if not isinstance(data, bytes):\n        data = data.encode('utf-8')\n    ans = b64encode(data)\n    if isinstance(ans, bytes):\n        ans = ans.decode('ascii')\n    return ans\n\n\nclass EmpikStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/78/58/'\n\n        url = 'https://www.empik.com/ebooki'\n\n        aff_url = aff_root + as_base64(url)\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + as_base64(detail_item)\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'https://www.empik.com/ebooki/ebooki,3501,s?sort=scoreDesc&resultsPP={}&q={}'.format(max_results, quote(query))\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"search-content js-search-content\"]/div'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//a[@class=\"img seoImage\"]/@href'))\n                if not id:\n                    continue\n\n                title = ''.join(data.xpath('.//h2[@class=\"product-title\"]/a/strong/text()'))\n                author = ', '.join(data.xpath('.//a[@class=\"smartAuthor \"]/text()'))\n                cover_url = ''.join(data.xpath('.//a/img[@class=\"lazy\"]/@lazy-img'))\n                price = ''.join(data.xpath('.//div[@class=\"price ta-price-tile \"]/text()'))\n\n                # with closing(br.open('https://empik.com' + id.strip(), timeout=timeout/4)) as nf:\n                #    idata = html.fromstring(nf.read())\n                #    crawled = idata.xpath('.//a[(@class=\"chosen hrefstyle\") or (@class=\"connectionsLink hrefstyle\")]/text()')\n                #    formats = ','.join([re.sub('ebook, ','', x.strip()) for x in crawled if 'ebook' in x])\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.split('  - ')[0]\n                s.author = author.strip()\n                s.price = price.strip()\n                s.detail_item = 'https://empik.com' + id.strip()\n                # s.formats = formats.upper().strip()\n\n                yield s\n",
  "legimi": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 12  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2023, Tomasz Długosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom base64 import b64encode\nfrom contextlib import closing\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\n\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef as_base64(data):\n    if not isinstance(data, bytes):\n        data = data.encode('utf-8')\n    ans = b64encode(data)\n    if isinstance(ans, bytes):\n        ans = ans.decode('ascii')\n    return ans\n\n\nclass LegimiStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/9/58/'\n\n        url = 'https://www.legimi.pl/ebooki/'\n\n        aff_url = aff_root + as_base64(url)\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + as_base64(detail_item)\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'https://www.legimi.pl/ebooki/?sort=score&filters=ebooks&searchphrase=' + quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"book-search row auto-clear\"]/div'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[@class=\"panel-body\"]/a/@href'))\n                if not id:\n                    continue\n\n                cover_url = ''.join(data.xpath('.//div[@class=\"img-content\"]/img/@data-src'))\n                title = ''.join(data.xpath('.//a[@class=\"book-title clampBookTitle\"]/text()'))\n                author = ' '.join(data.xpath('.//div[@class=\"authors-container clampBookAuthors\"]/a/text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.detail_item = 'https://www.legimi.pl' + id.strip()\n                s.drm = SearchResult.DRM_UNLOCKED\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout/2)) as nf:\n            idata = html.fromstring(nf.read())\n\n            price = ''.join(idata.xpath('.//section[@class=\"book-sale-options\"]//li[@data-test=\"ebook-retail-option\"]//p[@class=\"light-text\"]/text()'))\n            search_result.price = price.split('bez abonamentu ')[-1]\n        return True\n",
  "ozon_ru": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 3  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2013, Roman Mukhin <ramses_ru at hotmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.ebooks.chardet import xml_to_unicode\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nshop_url = 'http://www.ozon.ru'\n\n\ndef parse_html(raw):\n    try:\n        from html5_parser import parse\n    except ImportError:\n        # Old versions of calibre\n        import html5lib\n        return html5lib.parse(raw, treebuilder='lxml', namespaceHTMLElements=False)\n    else:\n        return parse(raw)\n\n\ndef search(query, max_results=15, timeout=60):\n    url = 'http://www.ozon.ru/?context=search&text=%s&store=1,0&group=div_book' % quote_plus(query)\n\n    counter = max_results\n    br = browser()\n\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = xml_to_unicode(f.read(), strip_encoding_pats=True, assume_utf8=True)[0]\n        root = parse_html(raw)\n        for tile in root.xpath('//*[@class=\"bShelfTile inline\"]'):\n            if counter <= 0:\n                break\n            counter -= 1\n\n            s = SearchResult(store_name='OZON.ru')\n            s.detail_item = shop_url + tile.xpath('descendant::a[@class=\"eShelfTile_Link\"]/@href')[0]\n            s.title = tile.xpath('descendant::span[@class=\"eShelfTile_ItemNameText\"]/@title')[0]\n            s.author = tile.xpath('descendant::span[@class=\"eShelfTile_ItemPerson\"]/@title')[0]\n            s.price = ''.join(tile.xpath('descendant::div[contains(@class, \"eShelfTile_Price\")]/text()'))\n            s.cover_url = 'http:' + tile.xpath('descendant::img/@data-original')[0]\n            s.price = format_price_in_RUR(s.price)\n            yield s\n\n\nclass OzonRUStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = detail_item or shop_url\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            d = WebStoreDialog(self.gui, shop_url, parent, url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=15, timeout=60):\n        for s in search(query, max_results=max_results, timeout=timeout):\n            yield s\n\n\ndef format_price_in_RUR(price):\n    '''\n    Try to format price according ru locale: '12 212,34 руб.'\n    @param price: price in format like 25.99\n    @return: formatted price if possible otherwise original value\n    @rtype: unicode\n    '''\n    price = price.replace('\\xa0', '').replace(',', '.').strip() + ' py6'\n    return price\n\n\nif __name__ == '__main__':\n    import sys\n    for r in search(sys.argv[-1]):\n        print(r)\n",
  "virtualo": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 12  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2023, Tomasz Długosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nfrom base64 import b64encode\nfrom contextlib import closing\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib import quote\n\nfrom lxml import html\n\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef as_base64(data):\n    if not isinstance(data, bytes):\n        data = data.encode('utf-8')\n    ans = b64encode(data)\n    if isinstance(ans, bytes):\n        ans = ans.decode('ascii')\n    return ans\n\n\nclass VirtualoStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/12/58/'\n\n        url = 'http://virtualo.pl/ebooki/'\n\n        aff_url = aff_root + as_base64(url)\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + as_base64(detail_item)\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=12, timeout=60):\n        url = 'http://virtualo.pl/?cat=1&q=' + quote(query)\n\n        br = browser()\n        no_drm_pattern = re.compile(r'Watermark|brak')\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"products-list-wrapper\"]//li[@class=\"product\"]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[@class=\"cover-wrapper\"]//a/@href')).split(r'?q=')[0]\n                if not id:\n                    continue\n\n                price = ''.join(data.xpath(\n                    './/div[@class=\"info\"]//div[@class=\"price\"]/div/text()|.//div[@class=\"info\"]//div[@class=\"price price--no-promo\"]/div/text()'))\n                cover_url = ''.join(data.xpath('.//img[@class=\"cover\"]/@src'))\n                title = ''.join(data.xpath('.//h3[@class=\"title\"]/a//text()'))\n                author = ', '.join(data.xpath('.//div[@class=\"info\"]//div[@class=\"authors\"]/a//text()'))\n                formats = [form.strip() for form in data.xpath('.//div[@class=\"text-wrapper\"]//div[@class=\"format\"]/span[@class=\"prompt_preview\"]/text()')]\n                nodrm = no_drm_pattern.search(''.join(data.xpath('.//div[@class=\"protection\"]/text()')))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = re.sub(r'\\.',',',price.strip())\n                s.detail_item = id\n                s.formats = ', '.join(list(filter(None, formats))).upper()\n                s.drm = SearchResult.DRM_UNLOCKED if nodrm else SearchResult.DRM_LOCKED\n\n                yield s\n",
  "wolnelektury": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 4  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2012-2023, Tomasz Długosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\n\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass WolneLekturyStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        url = 'https://wolnelektury.pl'\n        detail_url = None\n\n        if detail_item:\n            detail_url = detail_item\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'https://wolnelektury.pl/szukaj?q=' + quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"l-books__grid\"]/article'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//figure/a/@href'))\n                if not id:\n                    continue\n\n                title = ''.join(data.xpath('.//h2/a/text()'))\n                author = ', '.join(data.xpath('.//h3/a/text()'))\n                cover_url = ''.join(data.xpath('.//figure/a/img/@src'))\n                price = '0,00 zł'\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = 'https://wolnelektury.pl' + cover_url.strip()\n                s.title = title.strip()\n                s.author = author\n                s.price = price\n                s.detail_item = 'https://wolnelektury.pl' + id\n                s.formats = ', '.join(s.downloads.keys())\n                s.drm = SearchResult.DRM_UNLOCKED\n\n                yield s\n"
}