[{"pos": "epubcfi(/258/2/4/14[d25e30669]/1:7)", "pos_type": "epubcfi", "timestamp": "2023-04-05T11:52:05.451875+00:00", "type": "last-read"}, {"end_cfi": "/2/4/28[d25e2610]/1:305", "highlighted_text": "By using A instead of $a, we give the dot command a boost. Instead of having to position the cursor at the end of the line we want to change, we just have to make sure it is somewhere (anywhere!) on that line. Now we can repeat the change on consecutive lines just by typing j. as many times as it takes.", "notes": "Interesting example. I don't fully underestand this one yet but it works quite well. Move down with j and just add the dot(.)", "spine_index": 20, "spine_name": "f_0019.xhtml", "start_cfi": "/2/4/28[d25e2610]/1:18", "style": {"kind": "color", "type": "builtin", "which": "purple"}, "timestamp": "2022-11-11T16:22:09.612Z", "toc_family_titles": ["1. The Vim Way", "Tip 2. Don’t Repeat Yourself"], "type": "highlight", "uuid": "uqTbogAfcMAdaCaKfzT5Ug"}, {"end_cfi": "/2/4/34[d25e3482]/1:332", "highlighted_text": "We begin with our cursor positioned on the word “content” and then use the * command to search for it. Try it for yourself. Two things should happen: the cursor will jump forward to the next match, and all occurrences will be highlighted. If you don’t see any highlighting, try running :set hls and then refer to Tip 81, for more details.", "notes": "Quick search and then replace.\n\nWe use the * symbol here, after that we advance with n.\nOnce we do the first replacement we can use the dot(.) to execute the rest.\n", "spine_index": 23, "spine_name": "f_0022.xhtml", "start_cfi": "/2/4/34[d25e3482]/1:9", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2022-11-11T17:03:30.013Z", "toc_family_titles": ["1. The Vim Way", "Tip 5. Find and Replace by Hand"], "type": "highlight", "uuid": "D4peirC9fgECdijuVelDnw"}, {"end_cfi": "/2/4/36[d25e4085]/1:107", "highlighted_text": " text objects ", "notes": "first mention of a text object\n", "spine_index": 29, "spine_name": "f_0028.xhtml", "start_cfi": "/2/4/36[d25e4085]/1:93", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2022-11-11T22:53:45.966Z", "toc_family_titles": ["Part I. Modes", "2. Normal Mode", "Tip 9. Compose Repeatable Changes"], "type": "highlight", "uuid": "3YtjcuxYeVeY1E2UcSEyWg"}, {"end_cfi": "/2/4/12/1:32", "highlighted_text": " Vim’s Operator Commands", "notes": "Vim's operator commands", "spine_index": 32, "spine_name": "f_0031.xhtml", "start_cfi": "/2/4/12/1:8", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2022-11-12T14:29:55.869Z", "toc_family_titles": ["Part I. Modes", "2. Normal Mode", "Tip 12. Combine and Conquer"], "type": "highlight", "uuid": "b68skK46XttPG5h0IZqjkA"}, {"end_cfi": "/2/4/32[d25e4961]/1:161", "highlighted_text": "commentary.vim", "notes": "https://github.com/tpope/vim-commentary", "spine_index": 32, "spine_name": "f_0031.xhtml", "start_cfi": "/2/4/32[d25e4961]/1:147", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2022-11-12T14:40:44.204Z", "toc_family_titles": ["Part I. Modes", "2. Normal Mode", "Tip 12. Combine and Conquer"], "type": "highlight", "uuid": "mhIeecpoOJEmocAnqHW9lw"}, {"end_cfi": "/2/4/12/1:23", "highlighted_text": "Meet Insert Normal Mode", "notes": "Insert Normal Mode\n", "spine_index": 35, "spine_name": "f_0034.xhtml", "start_cfi": "/2/4/12/1:0", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2022-11-13T23:00:06.888Z", "toc_family_titles": ["Part I. Modes", "3. Insert Mode", "Tip 14. Get Back to Normal Mode"], "type": "highlight", "uuid": "eEscmutz7byGB4UuJ36yUQ"}, {"end_cfi": "/2/4/30[d25e9524]/8/1:5", "highlighted_text": "snap back to where we started (<C-o>", "notes": "very useful\n", "spine_index": 52, "spine_name": "f_0051.xhtml", "start_cfi": "/2/4/30[d25e9524]/1:207", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-11-23T17:00:53.952Z", "toc_family_titles": ["Part I. Modes", "5. Command-Line Mode", "Tip 29. Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands"], "type": "highlight", "uuid": "X2_axOVuwuk-YpXoOOJgCQ"}, {"end_cfi": "/2/4/100[d25e9156]/1:273", "highlighted_text": "The syntax for defining a range is very flexible. We can mix and match line numbers, marks, and patterns, and we can apply an offset to any of them. This table summarizes a few of the symbols that can be used to create addresses and ranges for Ex commands:", "notes": "Table summary of ranges\n", "spine_index": 51, "spine_name": "f_0050.xhtml", "start_cfi": "/2/4/100[d25e9156]/1:17", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-11-23T16:59:34.061Z", "toc_family_titles": ["Part I. Modes", "5. Command-Line Mode", "Tip 28. Execute a Command on One or More Consecutive Lines"], "type": "highlight", "uuid": "eEMN12YMS5TzkVDMeNlFEA"}, {"end_cfi": "/2/4/72[d25e9034]/1:100", "highlighted_text": "Vim also accepts a pattern as an address for an Ex command, such as the one shown here:", "notes": "range of lines using a pattern\n", "spine_index": 51, "spine_name": "f_0050.xhtml", "start_cfi": "/2/4/72[d25e9034]/1:13", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2022-11-23T16:59:54.969Z", "toc_family_titles": ["Part I. Modes", "5. Command-Line Mode", "Tip 28. Execute a Command on One or More Consecutive Lines"], "type": "highlight", "uuid": "-VvoSr4Uw7TQ_1TosVqg8A"}, {"end_cfi": "/2/4/24[d25e9424]/1:243", "highlighted_text": "We could shorten the :copy command to only two letters, as :co. Or we can be even more succinct by using the :t command, which is a synonym for :copy. As a mnemonic, you can think of it as copy TO. This table shows a few examples of the :t command in action:", "notes": "Copy command table\n", "spine_index": 52, "spine_name": "f_0051.xhtml", "start_cfi": "/2/4/24[d25e9424]/1:9", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-11-23T17:00:39.595Z", "toc_family_titles": ["Part I. Modes", "5. Command-Line Mode", "Tip 29. Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands"], "type": "highlight", "uuid": "gHk3grnGsqXBfWFakRW9mQ"}, {"end_cfi": "/2/4/30[d25e9524]/1:256", "highlighted_text": "put", "spine_index": 52, "spine_name": "f_0051.xhtml", "start_cfi": "/2/4/30[d25e9524]/1:253", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-11-24T22:21:41.699Z", "toc_family_titles": ["Part I. Modes", "5. Command-Line Mode", "Tip 29. Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands"], "type": "highlight", "uuid": "i_LSEeGkwRkaKmNdOMU2EQ"}, {"end_cfi": "/2/4/36[d25e9999]/1:218", "highlighted_text": "In ​Ex Commands Strike Far and Wide​, we noted that Ex commands can change multiple lines at once. The :normal command allows us to combine the expressive nature of Vim’s Normal mode commands with the range of Ex commands. It’s a powerful combination!", "notes": "nice quote", "spine_index": 53, "spine_name": "f_0052.xhtml", "start_cfi": "/2/4/36[d25e9999]/1:7", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-11-24T23:21:27.313Z", "toc_family_titles": ["Part I. Modes", "5. Command-Line Mode", "Tip 30. Run Normal Mode Commands Across a Range"], "type": "highlight", "uuid": "TZka0MK5onnHbSR_K3ly0w"}, {"end_cfi": "/2/4/16[d25e10141]/1:228", "highlighted_text": "In this case, a better option would be to use the <C-o> command (see Tip 56). Each time we run :bnext (or repeat it with the @: command), it adds a record to the jump list. The <C-o> command goes back to the previous record in the jump list.", "notes": "jump list and the repeat ex command example", "spine_index": 54, "spine_name": "f_0053.xhtml", "start_cfi": "/2/4/16[d25e10141]/1:11", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-11-24T23:28:17.817Z", "toc_family_titles": ["Part I. Modes", "5. Command-Line Mode", "Tip 31. Repeat the Last Ex Command"], "type": "highlight", "uuid": "iLDghGWhDsG2EOJDjDzVjw"}, {"end_cfi": "/2/4/30[d25e11803]/1:601", "highlighted_text": "Instead of executing these commands one by one, we could put them all into a file and save it to disk. Let’s call it batch.vim. (Using the .vim extension will make Vim use the correct syntax highlighting.) Each line of this file corresponds to a command line from the workflow outlined earlier. In this context we don’t need to prefix each line with a : character. Personally, I prefer to use the longhand names for Ex commands when putting them in a script. Saving keystrokes is less of a concern than making the script easy to read.", "notes": "Vim scripts introduction\n", "spine_index": 59, "spine_name": "f_0058.xhtml", "start_cfi": "/2/4/30[d25e11803]/1:37", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-11-29T10:57:53.279Z", "toc_family_titles": ["Part I. Modes", "5. Command-Line Mode", "Tip 36. Run Multiple Ex Commands as a Batch"], "type": "highlight", "uuid": "nWmN7wx27-B6yOtezqwPwA"}, {"end_cfi": "/2/4/10[d25e12111]/1:71", "highlighted_text": "Just like any other text editor, Vim allows us to read files, edit them, and save our changes. When we discuss our workflow, it’s tempting to say that we’re editing a file, but that’s not what we’re actually doing. Instead, we’re editing an in-memory representation of a file, which is called a buffer in Vim’s terminology.\n\nFiles are stored on the disk, whereas buffers exist in memory.", "notes": "A good explanation of how file editing works in general. Nice to see it enforced in Vim using this terminology.\n", "spine_index": 63, "spine_name": "f_0062.xhtml", "start_cfi": "/2/4/8[d25e12096]/1:17", "style": {"kind": "color", "type": "builtin", "which": "purple"}, "timestamp": "2022-11-29T13:15:08.314Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 37. Track Open Files with the Buffer List"], "type": "highlight", "uuid": "uJe3NIg6DLrbZKN0X0CJdg"}, {"end_cfi": "/2/4/26[d25e12214]/1:303", "highlighted_text": "The % symbol indicates which of the buffers is visible in the current window, while the # symbol represents the alternate file. We can quickly toggle between the current and alternate files by pressing <C-^>. Press it once, and we’ll switch to a.txt; press it a second time, and we’ll get back to b.txt.", "notes": "How to tell which buffer is currently being viewed(active)", "spine_index": 63, "spine_name": "f_0062.xhtml", "start_cfi": "/2/4/26[d25e12214]/1:17", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-11-29T13:16:23.688Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 37. Track Open Files with the Buffer List"], "type": "highlight", "uuid": "-ssENwsTCis3eZpvQHyvuw"}, {"end_cfi": "/2/4/34[d25e12330]/1:316", "highlighted_text": "(Vim already uses the [ and ] keys as prefixes for a series of related commands (see [ⓘ), so these mappings have a consistent feel to them. The unimpaired.vim plugin provides similar mappings for scrolling through the argument ([a and ]a), quickfix ([q and ]q), location ([l and ]l), and tag lists ([t and ]t). Check it out.)", "notes": "Unimpared endorsement. \n\nListing of basic navigation", "spine_index": 63, "spine_name": "f_0062.xhtml", "start_cfi": "/2/4/34[d25e12330]/1:11", "style": {"kind": "color", "type": "builtin", "which": "blue"}, "timestamp": "2022-11-29T13:17:57.446Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 37. Track Open Files with the Buffer List"], "type": "highlight", "uuid": "yTg_2Dfe6x1SqQ5GHEXehA"}, {"end_cfi": "/2/4/36[d25e12366]/1:479", "highlighted_text": "The :ls listing starts with a digit, which is assigned to each buffer automatically on creation. We can jump directly to a buffer by number, using the :buffer N command (see :bⓘ). Alternatively, we can use the more intuitive form, :buffer {bufname}. The {bufname} need only contain enough characters from the filepath to uniquely identify the buffer. If we enter a string that matches more than one of the items in the buffer list, we can use tab-completion to choose between the options (see Tip 32).", "notes": "Seems like a very useful command", "spine_index": 63, "spine_name": "f_0062.xhtml", "start_cfi": "/2/4/36[d25e12366]/1:25", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2022-11-29T13:18:33.880Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 37. Track Open Files with the Buffer List"], "type": "highlight", "uuid": "lvuRD8M66XRPVLUEkhNnkw"}, {"removed": true, "timestamp": "2022-11-29T22:39:24.497Z", "type": "highlight", "uuid": "_4RljJvYuG3CiterNBZaiw"}, {"end_cfi": "/2/4/64[d25e12820]/1:345", "highlighted_text": "Vim executes the text inside the backtick characters in the shell, using the output from the cat command as the argument for the :args command. Here, we’ve used the cat command to get the contents of the .chapters file, but we could use any command that’s available in the shell. This feature is not available on all systems. See backtick-expansionⓘ for more details.", "notes": "using a shell command in order to get the file list\n\nVery cool\n\nEnables for example storing a list of files in a list file or maybe even using a command to find certain files. A good idea is to use hidden files to store a list like this.", "spine_index": 64, "spine_name": "f_0063.xhtml", "start_cfi": "/2/4/64[d25e12820]/1:17", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2022-11-30T08:58:11.545Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 38. Group Buffers into a Collection with the Argument List"], "type": "highlight", "uuid": "GNlfXAEQr4WE87XGSXCeDQ"}, {"end_cfi": "/2/4/66/1:21", "highlighted_text": "Use the Argument List", "notes": "Just do it\n", "spine_index": 64, "spine_name": "f_0063.xhtml", "start_cfi": "/2/4/66/1:0", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2022-12-16T16:32:45.136Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 38. Group Buffers into a Collection with the Argument List"], "type": "highlight", "uuid": "h9g-hjUWEMjx6R0RJ74SCQ"}, {"end_cfi": "/2/4/10[d25e13315]/1:388", "highlighted_text": "When Vim starts up, it contains a single window. We can divide this window horizontally with the <C-w>s command, which creates two windows of equal height. Or we can use the <C-w>v command to split the window vertically, producing two windows of equal width. We can repeat these commands as often as we like, splitting our workspace again and again in a process that resembles cell division.", "notes": "Split Windows\n", "spine_index": 66, "spine_name": "f_0065.xhtml", "start_cfi": "/2/4/10[d25e13315]/1:9", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-11-30T09:50:15.214Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 40. Divide Your Workspace into Split Windows"], "type": "highlight", "uuid": "x5oITxRhkqAACdLGy1km6w"}, {"end_cfi": "/2/4/34[d25e13569]/1:335", "highlighted_text": "If we want to reduce the number of windows in our workspace, we can take one of two strategies. We could use the :close command to close the active window, or if we want to close all windows except the active one, we can instead use the :only command. This table summarizes the options and shows the normal mode equivalents:", "notes": "Very useful for closing managing windows", "spine_index": 66, "spine_name": "f_0065.xhtml", "start_cfi": "/2/4/34[d25e13569]/1:28", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2022-12-01T13:48:09.067Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 40. Divide Your Workspace into Split Windows"], "type": "highlight", "uuid": "6zPnygxfP_XO2PlOCIXD3w"}, {"end_cfi": "/2/4/14[d25e12556]/1:330", "highlighted_text": "The argument list represents the list of files that was passed as an argument when we ran the vim command. In our case, we provided a single argument, *.txt, but our shell expanded the * wildcard, matching the five files that we see in our argument list. The [] characters indicate which of the files in the argument list is active.", "notes": "a very useful summary of the arguments list\n", "spine_index": 64, "spine_name": "f_0063.xhtml", "start_cfi": "/2/4/14[d25e12556]/1:9", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2022-12-16T16:27:37.591Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 38. Group Buffers into a Collection with the Argument List"], "type": "highlight", "uuid": "zB3YQkxD8wenAlCW-IuYsQ"}, {"end_cfi": "/2/4/22[d25e12994]/1:201", "highlighted_text": "The bang symbol forces Vim to switch buffers, even if our current buffer has unsaved changes. When we run the :ls command now, b.txt is marked with the letter a for active, while a.txt is marked with the letter h for hidden.", "notes": "this isn't relevant for me\n", "spine_index": 65, "spine_name": "f_0064.xhtml", "start_cfi": "/2/4/22[d25e12994]/1:4", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2022-12-16T16:36:03.710Z", "toc_family_titles": ["Part II. Files", "6. Manage Multiple Files", "Tip 39. Manage Hidden Files"], "type": "highlight", "uuid": "towA1q0akMbkDvGLHO6C6g"}, {"end_cfi": "/2/4/2[sec.non.existent.dirs]/2/4/1:37", "highlighted_text": "Save Files to Nonexistent Directories", "notes": "quite a useful tip", "spine_index": 72, "spine_name": "f_0071.xhtml", "start_cfi": "/2/4/2[sec.non.existent.dirs]/2/4/1:0", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2022-12-17T00:01:20.799Z", "toc_family_titles": ["Part II. Files", "7. Open Files and Save Them to Disk", "Tip 45. Save Files to Nonexistent Directories"], "type": "highlight", "uuid": "0dWX9heUeWHqqRZ3WRJetA"}, {"end_cfi": "/2/4/28/2/1:53", "highlighted_text": "Don't Throw Away the Reverse Character Search Command", "notes": "Very useful\n\nremap the reverse search", "spine_index": 80, "spine_name": "f_0079.xhtml", "start_cfi": "/2/4/28/2/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-03T21:12:21.561Z", "toc_family_titles": ["Part III. Getting Around Faster", "8. Navigate Inside Files with Motions", "Tip 50. Find by Character"], "type": "highlight", "uuid": "AI2ia0ZzLGFQFhQMbqA_fw"}, {"end_cfi": "/2/4/34[d25e17501]/1:60", "highlighted_text": "Here’s an even quicker way of doing the same thing:", "notes": " A great way to quickly and precisely delete stuff", "spine_index": 81, "spine_name": "f_0080.xhtml", "start_cfi": "/2/4/34[d25e17501]/1:9", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-05T12:17:46.042Z", "toc_family_titles": ["Part III. Getting Around Faster", "8. Navigate Inside Files with Motions", "Tip 51. Search to Navigate"], "type": "highlight", "uuid": "nfEdHfC6mtrRS2okLfK7xA"}, {"end_cfi": "/2/4/36[sidebar.surround]/4/2[d25e19268]/1:190", "highlighted_text": "One of my favorite plugins is surround.vim by Tim Pope,[16] which makes wrapping a selection with a pair of delimiters easy. For example, we could put the words New York in quote marks:", "notes": "surround Vim examples\n", "spine_index": 85, "spine_name": "f_0084.xhtml", "start_cfi": "/2/4/36[sidebar.surround]/4/2[d25e19268]/1:17", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-11T18:35:23.486Z", "toc_family_titles": ["Part III. Getting Around Faster", "8. Navigate Inside Files with Motions", "Tip 55. Jump Between Matching Parentheses"], "type": "highlight", "uuid": "JI4SQOsFU1TE6sNUoJvgxg"}, {"end_cfi": "/2/4/28[d25e19180]/1:331", "highlighted_text": "Vim ships with a plugin called matchit, which enhances the functionality of the % command. When this plugin is enabled, the % command can jump between matching pairs of keywords. For example, in an HTML file, the % command would jump between opening and closing tags. In a Ruby file, it would jump between class/end, def/end, and if/end pairs.", "notes": "matchit plugin", "spine_index": 85, "spine_name": "f_0084.xhtml", "start_cfi": "/2/4/28[d25e19180]/1:17", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-11T18:35:37.235Z", "toc_family_titles": ["Part III. Getting Around Faster", "8. Navigate Inside Files with Motions", "Tip 55. Jump Between Matching Parentheses"], "type": "highlight", "uuid": "CLWIhcFoOEacZdRlK8Jjww"}, {"end_cfi": "/2/4/16[d25e17646]/1:139", "highlighted_text": "Suppose that our cursor was positioned inside a set of curly braces and we wanted to visually select the text inside the {}. Press vi}:", "notes": "Good example of using text objects", "spine_index": 82, "spine_name": "f_0081.xhtml", "start_cfi": "/2/4/16[d25e17646]/1:9", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2023-01-10T22:39:24.744Z", "toc_family_titles": ["Part III. Getting Around Faster", "8. Navigate Inside Files with Motions", "Tip 52. Trace Your Selection with Precision Text Objects"], "type": "highlight", "uuid": "xdTOg2yJUtJokOIOtGk1zQ"}, {"end_cfi": "/2/4/26[d25e17891]/4/1:1", "highlighted_text": "r i or a", "spine_index": 82, "spine_name": "f_0081.xhtml", "start_cfi": "/2/4/26[d25e17891]/1:87", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-10T22:42:09.284Z", "toc_family_titles": ["Part III. Getting Around Faster", "8. Navigate Inside Files with Motions", "Tip 52. Trace Your Selection with Precision Text Objects"], "type": "highlight", "uuid": "bRctv8G6uv0PJsHHqad8VQ"}, {"end_cfi": "/2/4/26[d25e17891]/1:311", "highlighted_text": "think of i as inside and a as around (or all).", "spine_index": 82, "spine_name": "f_0081.xhtml", "start_cfi": "/2/4/26[d25e17891]/1:282", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-10T22:42:27.998Z", "toc_family_titles": ["Part III. Getting Around Faster", "8. Navigate Inside Files with Motions", "Tip 52. Trace Your Selection with Precision Text Objects"], "type": "highlight", "uuid": "qdYmg1wwCjtoa9LteKckzA"}, {"end_cfi": "/2/4/6[d25e19704]/1:329", "highlighted_text": "Have you ever used the undo command followed immediately by redo? The two commands cancel each other out, but they have the side effect of placing the cursor on the most recent change. That could be useful if we wanted to jump back to the part of the document that we edited most recently. It’s a hack, but u<C-r> gets us there.", "notes": "Changelist", "spine_index": 88, "spine_name": "f_0087.xhtml", "start_cfi": "/2/4/6[d25e19704]/1:7", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-12T22:31:26.856Z", "toc_family_titles": ["Part III. Getting Around Faster", "9. Navigate Between Files with Jumps", "Tip 57. Traverse the Change List"], "type": "highlight", "uuid": "CjuCh4bK-JRMYiZFWyDBnQ"}, {"end_cfi": "/2/4/6[d25e19894]/1:137", "highlighted_text": "Let’s demonstrate with the jumps directory, from the source files distributed with this book. It contains the following directory tree:", "notes": "Gf command", "spine_index": 89, "spine_name": "f_0088.xhtml", "start_cfi": "/2/4/6[d25e19894]/1:7", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-12T22:39:48.212Z", "toc_family_titles": ["Part III. Getting Around Faster", "9. Navigate Between Files with Jumps", "Tip 58. Jump to the Filename Under the Cursor"], "type": "highlight", "uuid": "J9KR7zL2RAeP4vhh89LD1w"}, {"end_cfi": "/2/4/4[d25e21050]/2/1:223", "highlighted_text": "Rather than using a single clipboard for all cut, copy, and paste operations, Vim provides multiple registers. When we use the delete, yank, and put commands, we can specify which register we want to interact with.", "notes": "Vims registers. A really good introduction of the basics.", "spine_index": 95, "spine_name": "f_0094.xhtml", "start_cfi": "/2/4/4[d25e21050]/2/1:9", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-20T09:36:13.262Z", "toc_family_titles": ["Part IV. Registers", "10. Copy and Paste", "Tip 61. Grok Vim’s Registers"], "type": "highlight", "uuid": "5pPS9rP7bu1PdQauq5oUbQ"}, {"end_cfi": "/2/4/50[d25e21519]/1:246", "highlighted_text": "When we address a named register with a lowercase letter, it overwrites the specified register, whereas when we use an uppercase letter, it appends to the specified register. Skip ahead to Tip 100, to see a demonstration of appending to a register.", "notes": "Append to a named register\n", "spine_index": 95, "spine_name": "f_0094.xhtml", "start_cfi": "/2/4/50[d25e21519]/1:25", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-20T09:37:39.902Z", "toc_family_titles": ["Part IV. Registers", "10. Copy and Paste", "Tip 61. Grok Vim’s Registers"], "type": "highlight", "uuid": "YZ0JoQMQzoWhbiPU4FguZw"}, {"end_cfi": "/2/4/62[d25e21671]/1:251", "highlighted_text": "All of the registers that we’ve discussed so far are internal to Vim. If we want to copy some text from inside of Vim and paste it into an external program (or vice versa), then we have to use one of the system clipboards.", "notes": "Vim and the system clipboard\n", "spine_index": 95, "spine_name": "f_0094.xhtml", "start_cfi": "/2/4/62[d25e21671]/1:29", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-20T09:38:56.985Z", "toc_family_titles": ["Part IV. Registers", "10. Copy and Paste", "Tip 61. Grok Vim’s Registers"], "type": "highlight", "uuid": "BYVE9CJVig1rGy8HjbUC0w"}, {"end_cfi": "/2/4/18[d25e22130]/1:139", "highlighted_text": "Think of it this way: the visual selection in the document swaps places with the text in the register. Is it a feature? Is it a bug? You decide!", "notes": "This isn't the way it works in my Vim. Might be because of a plugin I installed.\n", "spine_index": 96, "spine_name": "f_0095.xhtml", "start_cfi": "/2/4/18[d25e22130]/1:7", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2023-01-20T09:58:22.257Z", "toc_family_titles": ["Part IV. Registers", "10. Copy and Paste", "Tip 62. Replace a Visual Selection with a Register"], "type": "highlight", "uuid": "B4iJN08O7g-jsf8C6XxBlw"}, {"end_cfi": "/2/4/28[d25e21261]/1:359", "highlighted_text": "As the name suggests, the yank register is set only when we use the y{motion} command. To put it another way: it’s not set by the x, s, c{motion}, and d{motion} commands. If we yank some text, we can be sure that it will stick around in register 0 until we explicitly overwrite it by yanking something else. The yank register is reliable, whereas the unnamed register is volatile.", "notes": "Unnamed register is volatile, yank register is stable/reliable\nvery useful quote\n", "spine_index": 95, "spine_name": "f_0094.xhtml", "start_cfi": "/2/4/28[d25e21261]/1:9", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-22T16:48:27.492Z", "toc_family_titles": ["Part IV. Registers", "10. Copy and Paste", "Tip 61. Grok Vim’s Registers"], "type": "highlight", "uuid": "wqgo-Y16M-YInfStKBNFJw"}, {"end_cfi": "/2/4/30[d25e22539]/1:235", "highlighted_text": "From Insert mode, we can insert the contents of the unnamed register by pressing <C-r>\", or we can insert the contents of the yank register by pressing <C-r>0 (see Tip 15, for more details). We can use this technique to solve our problem from ​Oops! I Clobbered My Yank​:", "notes": "Using the unnamed and yank registers in Insert mode\n", "spine_index": 97, "spine_name": "f_0096.xhtml", "start_cfi": "/2/4/30[d25e22539]/1:9", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-22T17:10:40.870Z", "toc_family_titles": ["Part IV. Registers", "10. Copy and Paste", "Tip 63. Paste from a Register"], "type": "highlight", "uuid": "d-OunH6NZH2kSKa55dK_JA"}, {"end_cfi": "/2/4/12[d25e23146]/1:220", "highlighted_text": "Like the game of Othello, Vim’s macros take a minute to learn and a lifetime to master. But everyone—from beginners to experts—can get a lot of value from this feature that makes it easy to automate tasks. Let’s see how.", "notes": "Nice quote\n", "spine_index": 99, "spine_name": "f_0098.xhtml", "start_cfi": "/2/4/12[d25e23146]/1:0", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2023-01-22T17:32:10.689Z", "toc_family_titles": ["Part IV. Registers", "11. Macros"], "type": "highlight", "uuid": "i_kZTW4FsDV_ntrY0JitZg"}, {"end_cfi": "/2/4/14[d25e23551]/1:241", "highlighted_text": "Always starting on square one makes it easier to strike the right target every time.", "notes": "good advice", "spine_index": 101, "spine_name": "f_0100.xhtml", "start_cfi": "/2/4/14[d25e23551]/1:157", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2023-01-22T17:46:22.645Z", "toc_family_titles": ["Part IV. Registers", "11. Macros", "Tip 66. Normalize, Strike, Abort"], "type": "highlight", "uuid": "tEKnL3zjUucwx35LdbyYJQ"}, {"end_cfi": "/2/4/104[d25e25386]/1:359", "highlighted_text": "This time we’re working on a set of files, so we can’t see everything in a single glance. If we execute the macro in series and it fails, then it will halt at the place where the error occurs, whereas if we execute the macro in parallel and it fails, we’ll have to browse through the argument list until we find the buffer where the error was raised.", "notes": "Very importaint information on the differences between approaches when runnings commands on multiple files\n", "spine_index": 105, "spine_name": "f_0104.xhtml", "start_cfi": "/2/4/104[d25e25386]/1:9", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2023-01-30T21:24:54.707Z", "toc_family_titles": ["Part IV. Registers", "11. Macros", "Tip 70. Act Upon a Collection of Files"], "type": "highlight", "uuid": "_dFd2f0LMOKsdCdjqR7Ugg"}, {"end_cfi": "/2/4/54[d25e24338]/1:80", "highlighted_text": "the", "spine_index": 103, "spine_name": "f_0102.xhtml", "start_cfi": "/2/4/54[d25e24338]/1:77", "style": {"kind": "color", "type": "builtin", "which": "purple"}, "timestamp": "2023-01-30T15:28:10.416Z", "toc_family_titles": ["Part IV. Registers", "11. Macros", "Tip 68. Repeat a Change on Contiguous Lines"], "type": "highlight", "uuid": "6qk2u--52GJZ-zCHMXcOTg"}, {"end_cfi": "/2/4/54[d25e24338]/1:206", "highlighted_text": " good thing too", "spine_index": 103, "spine_name": "f_0102.xhtml", "start_cfi": "/2/4/54[d25e24338]/1:191", "style": {"kind": "color", "type": "builtin", "which": "purple"}, "timestamp": "2023-01-30T15:28:15.015Z", "toc_family_titles": ["Part IV. Registers", "11. Macros", "Tip 68. Repeat a Change on Contiguous Lines"], "type": "highlight", "uuid": "9lMa_vTn5a0dfeZr2qRxhg"}, {"end_cfi": "/2/4/50[d25e25100]/1:250", "highlighted_text": "Each of these files begins with a copyright notice, so we have to take care to properly normalize the cursor position. Pressing gg places the cursor at the start of the file, and /class<CR> jumps forwards to the first occurrence of the word “class.”", "notes": "It is important to prepare the field before making any changes.", "spine_index": 105, "spine_name": "f_0104.xhtml", "start_cfi": "/2/4/50[d25e25100]/1:13", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2023-01-30T16:18:28.000Z", "toc_family_titles": ["Part IV. Registers", "11. Macros", "Tip 70. Act Upon a Collection of Files"], "type": "highlight", "uuid": "GpAtdPmYlIc4CYTkhZVNOQ"}, {"end_cfi": "/2/4/34[d25e24177]/1:231", "highlighted_text": "Using the f. motion also adds a safety catch. If no . characters are found on the current line, the f. command raises an error and macro execution aborts. We’ll exploit this later, so keep that thought at the back of your mind.", "notes": "Very important to keep in mind. It can make your macros more secure and less error prone.\n", "spine_index": 103, "spine_name": "f_0102.xhtml", "start_cfi": "/2/4/34[d25e24177]/1:9", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-01-30T15:24:24.142Z", "toc_family_titles": ["Part IV. Registers", "11. Macros", "Tip 68. Repeat a Change on Contiguous Lines"], "type": "highlight", "uuid": "HGZBte40UB1mpzjk8-9QBA"}, {"end_cfi": "/2/4/14/1:35", "highlighted_text": "Setting Case Sensitivity per Search", "notes": "I already know this\n", "spine_index": 111, "spine_name": "f_0110.xhtml", "start_cfi": "/2/4/14/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-01T13:06:52.601Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 73. Tune the Case Sensitivity of Search Patterns"], "type": "highlight", "uuid": "O7aSnt3T_0E9UlldIn25rQ"}, {"end_cfi": "/2/4/28[d25e26677]/1:254", "highlighted_text": "We can normalize the rules for all special symbols with the \\v pattern switch. This enables very magic search, where all characters assume a special meaning, with the exception of “_”, uppercase and lowercase letters, and the digits 0 through 9 (see \\vⓘ).", "notes": "Very magic search. \\v\nAll characters have special meaning", "spine_index": 112, "spine_name": "f_0111.xhtml", "start_cfi": "/2/4/28[d25e26677]/1:17", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-01T13:14:45.371Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 74. Use the \\v Pattern Switch for Regex Searches"], "type": "highlight", "uuid": "eFNPJ3LTG7YDNgVy9qvbzA"}, {"end_cfi": "/2/4/36[d25e26727]/1:184", "highlighted_text": "The \\v switch at the start causes all subsequent characters to take on a special meaning. It looks much more readable without all of those backslash characters, don’t you think?", "notes": "Yes we do\n", "spine_index": 112, "spine_name": "f_0111.xhtml", "start_cfi": "/2/4/36[d25e26727]/1:9", "style": {"kind": "color", "type": "builtin", "which": "purple"}, "timestamp": "2023-02-01T13:17:24.410Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 74. Use the \\v Pattern Switch for Regex Searches"], "type": "highlight", "uuid": "7dQmSB35S5iZaja6YX296Q"}, {"end_cfi": "/2/4/54/4/8[d25e26965]/1:296", "highlighted_text": "except _, numbers, and letters", "spine_index": 112, "spine_name": "f_0111.xhtml", "start_cfi": "/2/4/54/4/8[d25e26965]/1:267", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-01T13:27:01.793Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 74. Use the \\v Pattern Switch for Regex Searches"], "type": "highlight", "uuid": "1AE7TbY1-KXW5z8qY8NjTA"}, {"end_cfi": "/2/4/54/4/8[d25e26965]/1:397", "highlighted_text": "Perl’s regular expressions", "spine_index": 112, "spine_name": "f_0111.xhtml", "start_cfi": "/2/4/54/4/8[d25e26965]/1:371", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2023-02-01T13:27:12.669Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 74. Use the \\v Pattern Switch for Regex Searches"], "type": "highlight", "uuid": "GH-kA9rKxzJYRsAXbcdSSQ"}, {"end_cfi": "/2/4/4[d25e26979]/2/2/1:11", "highlighted_text": "verynomagic", "spine_index": 113, "spine_name": "f_0112.xhtml", "start_cfi": "/2/4/4[d25e26979]/2/2/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-01T13:27:43.011Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 75. Use the \\V Literal Switch for Verbatim Searches"], "type": "highlight", "uuid": "3_n7hXH25deLRTdaUnCTOw"}, {"end_cfi": "/2/4/32[d25e27197]/1:286", "highlighted_text": "Creating regular expressions in a very nomagic search is still possible, but it’s awkward because we have to escape every symbol. As a general rule, if you want to search for a regular expression, use the \\v pattern switch, and if you want to search for verbatim text, use the \\V literal switch.", "notes": "Nice and simple summary explanation", "spine_index": 113, "spine_name": "f_0112.xhtml", "start_cfi": "/2/4/32[d25e27197]/1:7", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2023-02-01T13:31:18.732Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 75. Use the \\V Literal Switch for Verbatim Searches"], "type": "highlight", "uuid": "gXcYmrx4CxSmrJ8-AkdSaw"}, {"end_cfi": "/2/4/22[d25e27306]/1:277", "highlighted_text": "Finally, the \\_s item matches whitespace or a line break ", "notes": "Extremely useful.\n\n\\_s", "spine_index": 114, "spine_name": "f_0113.xhtml", "start_cfi": "/2/4/22[d25e27306]/1:223", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-01T13:41:47.262Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 76. Use Parentheses to Capture Submatches"], "type": "highlight", "uuid": "ojqd97-NEnQFRIVLoAPTXg"}, {"end_cfi": "/2/4/24[d25e27348]/1:167", "highlighted_text": "matching opening and closing pairs of XML or HTML", "spine_index": 114, "spine_name": "f_0113.xhtml", "start_cfi": "/2/4/24[d25e27348]/1:118", "style": {"kind": "color", "type": "builtin", "which": "purple"}, "timestamp": "2023-02-01T14:36:06.732Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 76. Use Parentheses to Capture Submatches"], "type": "highlight", "uuid": "l1gze4SsiCZA-GV9Y_XTIw"}, {"end_cfi": "/2/4/12[d25e27487]/1:25", "highlighted_text": "zero-width items", "spine_index": 115, "spine_name": "f_0114.xhtml", "start_cfi": "/2/4/12[d25e27487]/2/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-01T14:47:54.692Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 77. Stake the Boundaries of a Word"], "type": "highlight", "uuid": "AQeYC4Dmexe_-iLq-ZbK2Q"}, {"end_cfi": "/2/4/12[d25e27487]/1:179", "highlighted_text": "They represent the boundary between a word and the whitespace or punctuation that surrounds it.", "spine_index": 115, "spine_name": "f_0114.xhtml", "start_cfi": "/2/4/12[d25e27487]/1:84", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2023-02-01T14:48:02.918Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 77. Stake the Boundaries of a Word"], "type": "highlight", "uuid": "0b959_Sgc1AtIiduEPt-Zw"}, {"end_cfi": "/2/4/2[sec.pattern.zs]/2/4/1:31", "highlighted_text": "Stake the Boundaries of a Match", "notes": "Sounds very useful", "spine_index": 116, "spine_name": "f_0115.xhtml", "start_cfi": "/2/4/2[sec.pattern.zs]/2/4/1:0", "style": {"kind": "color", "type": "builtin", "which": "red"}, "timestamp": "2023-02-01T15:17:39.074Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 78. Stake the Boundaries of a Match"], "type": "highlight", "uuid": "-GtS9Y7Js68UiCZZx3VOmQ"}, {"end_cfi": "/2/4/18[d25e27867]/1:181", "highlighted_text": "The basic pattern uses a common regex idiom: \"[^\"]+\". The pattern begins and ends with a quote mark and then matches one or more characters in between that are anything but a quote.", "notes": "Very common and extremely useful.", "spine_index": 116, "spine_name": "f_0115.xhtml", "start_cfi": "/2/4/18[d25e27867]/1:7", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2023-02-01T16:57:44.111Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 78. Stake the Boundaries of a Match"], "type": "highlight", "uuid": "PTIsrMKoRB0YWItfxuRptg"}, {"end_cfi": "/2/4/66[d25e28193]/1:103", "highlighted_text": "The backslash character always needs to be escaped, whether we’re searching forward or backward.", "spine_index": 117, "spine_name": "f_0116.xhtml", "start_cfi": "/2/4/66[d25e28193]/1:7", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-02T09:27:17.630Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 79. Escape Problem Characters"], "type": "highlight", "uuid": "0ZGYKFYeiNhEVXnbw8W4Dg"}, {"end_cfi": "/2/4/68/1:34", "highlighted_text": "Escape Characters Programmatically", "notes": "Programatic search", "spine_index": 117, "spine_name": "f_0116.xhtml", "start_cfi": "/2/4/68/1:0", "style": {"kind": "color", "type": "builtin", "which": "green"}, "timestamp": "2023-02-02T09:36:08.624Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 79. Escape Problem Characters"], "type": "highlight", "uuid": "SEfTXmbDM8HCH83UmQrw4g"}, {"end_cfi": "/2/4/74[d25e28235]/1:294", "highlighted_text": "That switches from the search prompt to the expression register prompt.", "spine_index": 117, "spine_name": "f_0116.xhtml", "start_cfi": "/2/4/74[d25e28235]/1:223", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-02T09:40:46.371Z", "toc_family_titles": ["Part V. Patterns", "12. Matching Patterns and Literals", "Tip 79. Escape Problem Characters"], "type": "highlight", "uuid": "jr4x2XC-24ji1t1R3pky2g"}, {"end_cfi": "/2/4/14/1:34", "highlighted_text": "Check for the Existence of a Match", "spine_index": 121, "spine_name": "f_0120.xhtml", "start_cfi": "/2/4/14/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-02T12:23:05.418Z", "toc_family_titles": ["Part V. Patterns", "13. Search", "Tip 82. Preview the First Match Before Execution"], "type": "highlight", "uuid": "BzNdN3jYYZg2m_qKrgvpKg"}, {"end_cfi": "/2/4/34[d25e29248]/1:477", "highlighted_text": "That’s no problem: we could simply run //e<CR>. When we leave the search field blank like this, Vim reuses the pattern from the previous search. So this repeats the last search but with an offset.", "notes": "very nice", "spine_index": 122, "spine_name": "f_0121.xhtml", "start_cfi": "/2/4/34[d25e29248]/1:288", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-03T21:09:58.031Z", "toc_family_titles": ["Part V. Patterns", "13. Search", "Tip 83. Offset the Cursor to the End of a Search Match"], "type": "highlight", "uuid": "NUsy5tV6HAm-udu3y4EpBQ"}, {"end_cfi": "/2/4/30[d25e29853]/6/1:6", "highlighted_text": "except", "spine_index": 124, "spine_name": "f_0123.xhtml", "start_cfi": "/2/4/30[d25e29853]/6/1:0", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-15T15:53:55.835Z", "toc_family_titles": ["Part V. Patterns", "13. Search", "Tip 85. Create Complex Patterns by Iterating upon Search History"], "type": "highlight", "uuid": "CX8E2l54rGK6QeS7Dhwbcw"}, {"end_cfi": "/2/4/64/2/4/2/1:17", "highlighted_text": "(([^']|'\\w)+)", "spine_index": 124, "spine_name": "f_0123.xhtml", "start_cfi": "/2/4/64/2/4/2/1:4", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-15T21:56:00.856Z", "toc_family_titles": ["Part V. Patterns", "13. Search", "Tip 85. Create Complex Patterns by Iterating upon Search History"], "type": "highlight", "uuid": "v4K_4i7sC-J998jLITGdTQ"}, {"end_cfi": "/2/4/30[d25e31099]/1:240", "highlighted_text": "vertical axis ", "spine_index": 129, "spine_name": "f_0128.xhtml", "start_cfi": "/2/4/30[d25e31099]/1:226", "style": {"kind": "color", "type": "builtin", "which": "yellow"}, "timestamp": "2023-02-15T21:59:13.567Z", "toc_family_titles": ["Part V. Patterns", "14. Substitution", "Tip 89. Find and Replace Every Match in a File"], "type": "highlight", "uuid": "xuH4x08_pLiANkjCgxaIIA"}, {"end_cfi": "/2/4/38[d25e31569]/1:181", "highlighted_text": ":let @/=’Pragmatic Vim’ is a programmatic way of setting the search pattern. It has the same effect as executing the search /Pragmatic Vim<CR> (except that running :let @/=’Pragmatic Vim’ does not create a record in the search history).", "spine_index": 132, "spine_name": "f_0131.xhtml", "start_cfi": "/2/4/38[d25e31569]/2/1:0", "style": {"kind": "color", "type": "builtin", "which": "blue"}, "timestamp": "2023-02-15T22:34:07.773Z", "toc_family_titles": ["Part V. Patterns", "14. Substitution", "Tip 92. Replace with the Contents of a Register"], "type": "highlight", "uuid": "_iMBZ99gkdeeL4CQm-g3IQ"}]